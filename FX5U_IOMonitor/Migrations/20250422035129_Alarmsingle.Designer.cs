// <auto-generated />
using System;
using FX5U_IOMonitor.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FX5U_IOMonitor.Migrations
{
    [DbContext(typeof(ApplicationDB))]
    [Migration("20250422035129_Alarmsingle")]
    partial class Alarmsingle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FX5U_IOMonitor.Data.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("M_Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Possible")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Repair_steps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceDbName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("current_single")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("alarm");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.Drill_MachineIO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassTag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IOType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLife")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MountTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("RUL")
                        .HasColumnType("REAL");

                    b.Property<int>("RelayType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_green")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_red")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_yellow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UnmountTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("current_single")
                        .HasColumnType("INTEGER");

                    b.Property<int>("equipment_use")
                        .HasColumnType("INTEGER");

                    b.Property<double>("percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Drill_IO");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Drill_MachineIOId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MachineIOId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Sawing_MachineIOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceDbName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("usetime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Drill_MachineIOId");

                    b.HasIndex("Sawing_MachineIOId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.Sawing_MachineIO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassTag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IOType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLife")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MountTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("RUL")
                        .HasColumnType("REAL");

                    b.Property<int>("RelayType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_green")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_red")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Setting_yellow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UnmountTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("current_single")
                        .HasColumnType("INTEGER");

                    b.Property<int>("equipment_use")
                        .HasColumnType("INTEGER");

                    b.Property<double>("percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Sawing_IO");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.Total_time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Drill_electricity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency_Converter_usetime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PLC_usetime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Possible")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Repair_steps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Runtime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sawing_electricity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sawing_total_Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Servo_drives_usetime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Spindle_usetime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("clamping")
                        .HasColumnType("INTEGER");

                    b.Property<int>("feeder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("loose_tools")
                        .HasColumnType("INTEGER");

                    b.Property<int>("measurement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("origin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Total_time");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.History", b =>
                {
                    b.HasOne("FX5U_IOMonitor.Data.Drill_MachineIO", null)
                        .WithMany("Histories")
                        .HasForeignKey("Drill_MachineIOId");

                    b.HasOne("FX5U_IOMonitor.Data.Sawing_MachineIO", null)
                        .WithMany("Histories")
                        .HasForeignKey("Sawing_MachineIOId");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.Drill_MachineIO", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("FX5U_IOMonitor.Data.Sawing_MachineIO", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
